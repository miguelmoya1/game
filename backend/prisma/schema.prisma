generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ItemType {
  EQUIPPABLE
  USABLE
}

enum AccountProvider {
  EMAIL
}

enum UserRole {
  ADMIN
  USER
}

enum PlaceCategory {
  KNOWLEDGE
  FAITH
  NATURE
  COMMERCE
  FITNESS
  COMMUNITY
  CRAFT
  HEALTH
  ARTS
  HISTORIC
}

enum StatsType {
  STR
  DEX
  CON
  INT
  WIS
  CHA
}

enum Rank {
  E
  D
  C
  B
  A
  S
  SS
  NATIONAL
  INTERNATIONAL
}

enum EffectType {
  PASSIVE_HEAL_TEAM
  PASSIVE_HEAL_SELF
  REVIVE_ONCE
  IMMUNE_POISON
}

enum EffectTarget {
  ALLY
  ENEMY
  SELF
  TEAM
}

enum StatsTarget {
  ALLY
  ENEMY
  SELF
  TEAM
}

model User {
  id        String    @id @default(uuid())
  name      String
  role      UserRole  @default(USER)
  surname   String?
  nickname  String?
  language  String    @default("en")
  accounts  Account[]
  player    Player?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([name])
  @@index([role])
  @@index([surname])
  @@index([nickname])
}

model Place {
  id             String                    @id @default(uuid())
  apiId          String                    @unique
  name           String
  lat            Float
  lng            Float
  osmTags        Json?
  currentItemId  String
  currentItem    Item                      @relation("CurrentItem", fields: [currentItemId], references: [id])
  collectionLogs PlayerItemCollectionLog[]
  categories     PlaceCategory[]
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  deletedAt      DateTime?

  @@index([apiId])
  @@index([name])
  @@index([lat, lng])
  @@index([currentItemId])
}

model PlaceApiHistory {
  id            String    @id @default(uuid())
  lat           Float
  lng           Float
  radius        Int
  lastRequestAt DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  @@index([lat])
  @@index([lng])
}

model Account {
  id                   String          @id @default(uuid())
  provider             AccountProvider @default(EMAIL)
  providerId           String
  email                String          @unique
  password             String?
  isConfirmed          Boolean         @default(false)
  isPrimary            Boolean         @default(false)
  hashForPasswordReset String?
  hashExpiredAt        DateTime?
  userId               String
  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  deletedAt            DateTime?

  @@index([provider])
  @@index([providerId])
  @@index([isConfirmed])
  @@index([userId])
}

model Race {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  isPlayable  Boolean   @default(true)
  spells      Spell[]
  players     Player[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@index([name])
  @@index([isPlayable])
}

model Spell {
  id            String   @id @default(uuid())
  name          String   @unique
  description   String?
  requiredLevel Int      @default(1)
  raceId        String
  race          Race     @relation(fields: [raceId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([raceId])
  @@index([requiredLevel])
}

model Player {
  id             String                    @id @default(uuid())
  level          Int                       @default(1)
  rank           Rank                      @default(E)
  experience     Int                       @default(0)
  /// [Stats] [{statsType: STR, value: 10}]
  stats          Json                      @db.JsonB
  userId         String                    @unique
  user           User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  raceId         String
  race           Race                      @relation(fields: [raceId], references: [id])
  inventory      PlayerItem[]
  collectionLogs PlayerItemCollectionLog[]
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  deletedAt      DateTime?

  @@index([userId])
  @@index([rank])
  @@index([raceId])
  @@index([level])
}

model PlayerItemCollectionLog {
  id                  String   @id @default(uuid())
  collectionMonthYear String
  collectedAt         DateTime @default(now())
  playerId            String
  player              Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  placeId             String
  place               Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  itemId              String
  item                Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([playerId, placeId, collectionMonthYear])
  @@index([playerId])
  @@index([placeId])
  @@index([itemId])
  @@index([collectionMonthYear])
}

model PlayerItem {
  id         String   @id @default(uuid())
  quantity   Int      @default(1)
  isEquipped Boolean  @default(false)
  acquiredAt DateTime @default(now())
  playerId   String
  player     Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  itemId     String
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([playerId])
  @@index([itemId])
  @@index([isEquipped])
}

model Item {
  id              String                    @id @default(uuid())
  name            String                    @unique
  description     String?
  itemType        ItemType
  imageUrl        String?
  useEffect       String?
  rank            Rank?
  spawnCategories PlaceCategory[]
  currentInPlaces Place[]                   @relation("CurrentItem")
  collectionLogs  PlayerItemCollectionLog[]
  playerItems     PlayerItem[]
  /// [Stats] [{statsType: STR, value: 10, statsTarget: ALLY}] 
  stats           Json?                     @db.JsonB
  setId           String?
  set             Set?                      @relation(fields: [setId], references: [id])
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  deletedAt       DateTime?

  @@index([name])
  @@index([itemType])
  @@index([rank])
  @@index([spawnCategories])
  @@index([setId])
}

model Set {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  items       Item[]
  ///[Effect] [{type?: PASSIVE_HEAL_TEAM, value?: 10, target?: ALLY, stats?: STR, statsTarget?: ALLY}]
  effects     Json?     @db.JsonB
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}
